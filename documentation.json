{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-7c5a26af3f297596099d00bc2ebd9866a3a3ea08ca031e012c1369abdc7e0d4997ac65efc693f6a08d4ad50ca63f63a5f52aa2ae8dae008043ca54a58d3363e7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'angular-17'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterOutlet } from '@angular/router';\n\nimport { ButtonComponent } from './shared/button/button.component';\nimport { InputComponent } from './shared/input/input.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, RouterOutlet, ButtonComponent, InputComponent],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'angular-17';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container margin-block-start-8\">\n  <app-button\n    class=\"margin-inline-end-6\"\n    label=\"Este es el contenido del botón\"\n    size=\"large\"\n    variant=\"accent\"\n  />\n\n  <app-button\n    label=\"Este es un botón primario\"\n    size=\"large\"\n  />\n</div>\n\n<div class=\"container margin-block-start-10\">\n  <app-input\n    label=\"Este es un input\"\n    name=\"input\"\n    placeholder=\"Placeholder\"\n  />\n\n  <app-input\n    [required]=\"true\"\n    label=\"Required input\"\n    name=\"required-input\"\n    placeholder=\"Placeholder\"\n  />\n\n  <app-input\n    [hasLabel]=\"false\"\n    label=\"Input sin label\"\n    name=\"input-without-label\"\n  />\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-594b527bddc4ecf6b65add53458046d8aae0ea3194284c3661c806d8e82611a1bac1cf54472ac80dc0d0e5d63e73594ae3a53730782fe3021d0e592bf63b1706",
            "file": "src/app/shared/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nDefines the label of the button\n",
                    "description": "<p>Defines the label of the button</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the size of the button\n",
                    "description": "<p>Defines the size of the button</p>\n",
                    "line": 19,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the html type of the button\n",
                    "description": "<p>Defines the html type of the button</p>\n",
                    "line": 24,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the variant of the button\n",
                    "description": "<p>Defines the variant of the button</p>\n",
                    "line": 29,
                    "type": "\"accent\" | \"primary\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClickButton",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the click event of the button\n",
                    "description": "<p>Handles the click event of the button</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 853,
                                "end": 858,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 847,
                                "end": 852,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './button.component.html',\n})\nexport class ButtonComponent {\n  /**\n   * Defines the label of the button\n   */\n  @Input({ required: true }) label!: string;\n\n  /**\n   * Defines the size of the button\n   */\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Defines the html type of the button\n   */\n  @Input() type: 'button' | 'submit' | 'reset' = 'button';\n\n  /**\n   * Defines the variant of the button\n   */\n  @Input() variant: 'accent' | 'primary' = 'primary';\n\n  /**\n   * Optional click handler\n   */\n  @Output() onClick = new EventEmitter<any>();\n\n  /**\n   * Handles the click event of the button\n   * @param event\n   */\n  onClickButton(event: any) {\n    this.onClick.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  (click)=\"onClickButton($event)\"\n  [attr.data-size]=\"size\"\n  [attr.data-variant]=\"variant\"\n  [type]=\"type\"\n  class=\"button\"\n>\n  {{ label }}\n</button>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-927ea3a57685c454d30eba35b1ad911737116885b24277e2f4bf5f53a394a0e04786ba7f6f579787b20d2375d12e0d07f983798271848860c60508c9c74826ae",
            "file": "src/app/shared/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hasLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether to show the label or not\n",
                    "description": "<p>Whether to show the label or not</p>\n",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nThe label to show if hasLabel is true, if not, this is used as aria-label\n",
                    "description": "<p>The label to show if hasLabel is true, if not, this is used as aria-label</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nThe name of the input\n",
                    "description": "<p>The name of the input</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder to show in the input\n",
                    "description": "<p>The placeholder to show in the input</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether the input is readonly or not\n",
                    "description": "<p>Whether the input is readonly or not</p>\n",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether the input is required or not\n",
                    "description": "<p>Whether the input is required or not</p>\n",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe HTML type of the input\n",
                    "description": "<p>The HTML type of the input</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe value of the input\n",
                    "description": "<p>The value of the input</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-input',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './input.component.html',\n})\nexport class InputComponent {\n  /**\n   * Whether to show the label or not\n   */\n  @Input() hasLabel = true;\n  /**\n   * The label to show if hasLabel is true, if not, this is used as aria-label\n   */\n  @Input({ required: true }) label!: string;\n  /**\n   * The placeholder to show in the input\n   */\n  @Input() placeholder = '';\n  /**\n   * The value of the input\n   */\n  @Input() value = '';\n  /**\n   * The HTML type of the input\n   */\n  @Input() type = 'text';\n  /**\n   * Whether the input is readonly or not\n   */\n  @Input() readonly = false;\n  /**\n   * The name of the input\n   */\n  @Input({ required: true }) name!: string;\n  /**\n   * Whether the input is required or not\n   */\n  @Input() required = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (hasLabel) {\n  <label\n    class=\"label\"\n    [for]=\"name\"\n    [ngClass]=\"required ? 'required':''\"\n  >\n    {{ label }}\n  </label>\n\n  <input\n    class=\"input\"\n    [type]=\"type\"\n    [name]=\"name\"\n    [id]=\"name\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n  />\n} @else {\n  <input\n    class=\"input\"\n    [type]=\"type\"\n    [attr.aria-label]=\"label\"\n  />\n}\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'accent',\n    label: 'Accent',\n  },\n}"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideRouter(routes)]\n}"
            },
            {
                "name": "InputWithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Input',\n    name: 'input-with-label',\n  },\n}"
            },
            {
                "name": "InputWithLabelRequired",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Input',\n    name: 'input-with-label',\n    required: true,\n  },\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Large Button',\n  },\n}"
            },
            {
                "name": "Medium",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Medium Button',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Molecules/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  argTypes: {\n    type: {\n      control: 'select',\n    },\n    size: {\n      control: 'select',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InputComponent>",
                "defaultValue": "{\n  title: 'Molecules/Input',\n  component: InputComponent,\n  tags: ['autodocs'],\n  render: (args: InputComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  argTypes: {\n    type: {\n      control: 'select',\n    },\n    readonly: {\n      control: 'boolean',\n    },\n  },\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Primary',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Small Button',\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/app/shared/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "src/app/shared/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/shared/button/button.stories.ts": [
                {
                    "name": "Accent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'accent',\n    label: 'Accent',\n  },\n}"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Large Button',\n  },\n}"
                },
                {
                    "name": "Medium",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Medium Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Molecules/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  argTypes: {\n    type: {\n      control: 'select',\n    },\n    size: {\n      control: 'select',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Primary',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Small Button',\n  },\n}"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideRouter(routes)]\n}"
                }
            ],
            "src/app/shared/input/input.stories.ts": [
                {
                    "name": "InputWithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Input',\n    name: 'input-with-label',\n  },\n}"
                },
                {
                    "name": "InputWithLabelRequired",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Input',\n    name: 'input-with-label',\n    required: true,\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InputComponent>",
                    "defaultValue": "{\n  title: 'Molecules/Input',\n  component: InputComponent,\n  tags: ['autodocs'],\n  render: (args: InputComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n  argTypes: {\n    type: {\n      control: 'select',\n    },\n    readonly: {\n      control: 'boolean',\n    },\n  },\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/shared/button/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/app/shared/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/shared/input/input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "src/app/shared/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 12,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Medium",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 88,
                "coverageCount": "8/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputWithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputWithLabelRequired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}